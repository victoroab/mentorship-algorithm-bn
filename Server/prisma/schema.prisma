// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Messages {
  id         String   @id @default(uuid())
  sender     String
  message    String
  receipent  String
  created_at DateTime @default(now())
}

model Student {
  id                   String               @id @default(uuid())
  firstName            String
  middleName           String
  lastName             String
  email                String               @unique
  phoneNumber          String?
  age                  Int
  gender               String
  ethnicity            String
  program              String?
  matricNo             String
  class                String?
  communicationStyle   String?
  degreesObtained      String?
  communicationChannel String?
  expertiseInField     String?
  maritalStatus        String?
  empathy              Float
  communication        Float
  patience             Float
  openMindedness       Float
  adaptability         Float
  leadership           Float
  accountability       Float
  problemSolving       Float
  resilience           Float
  trustworthiness      Float
  mentor               Mentor?              @relation(fields: [mentorId], references: [id])
  mentorId             String?
  picture              String?
  AreasOfInterest      AreasOfInterest      @relation(fields: [areasOfIntrestId], references: [id], onDelete: Cascade)
  areasOfIntrestId     String               @unique
  Skills               StudentSkills        @relation(fields: [skillsId], references: [id], onDelete: Cascade)
  skillsId             String               @unique
  Hobbies              StudentHobbies       @relation(fields: [hobbiesId], references: [id], onDelete: Cascade)
  hobbiesId            String               @unique
  Availability         StudentAvailability  @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId       String               @unique
  mentorshipRequests   MentorshipRequests[]
  tasks                StudentsTasks[]
  schedules            StudentSchedules[]
}

model StudentsTasks {
  id           String   @id @default(uuid())
  title        String
  student      Student  @relation(fields: [studentEmail], references: [email])
  studentEmail String
  created_at   DateTime @default(now())
  completed    String
}

model StudentSchedules {
  id           String  @id @default(uuid())
  title        String
  student      Student @relation(fields: [studentEmail], references: [email])
  studentEmail String
  date         String
}

model AreasOfInterest {
  id     String   @id @default(uuid())
  aoi    String
  stuent Student?
}

model StudentSkills {
  id      String   @id @default(uuid())
  skills  String
  student Student?
}

model StudentHobbies {
  id      String   @id @default(uuid())
  hobbies String
  student Student?
}

model StudentAvailability {
  id      String   @id @default(uuid())
  days    String
  student Student?
}

model Mentor {
  id                   String               @id @default(uuid())
  firstName            String
  middleName           String
  lastName             String
  email                String               @unique
  phoneNumber          String?
  age                  Int
  gender               String
  ethnicity            String
  department           String
  rank                 String
  staffNo              String
  picture              String?
  cv                   String?
  communicationStyle   String
  degreesObtained      String
  communicationChannel String
  expertiseInField     String
  maritalStatus        String
  empathy              Float
  communication        Float
  patience             Float
  openMindedness       Float
  adaptability         Float
  leadership           Float
  accountability       Float
  problemSolving       Float
  resilience           Float
  trustworthiness      Float
  Mentee               Student[]
  Preferences          MentorPreferences    @relation(fields: [preferenceId], references: [id])
  preferenceId         String               @unique
  Skills               MentorSkills         @relation(fields: [skillsId], references: [id])
  skillsId             String               @unique
  Hobbies              MentorHobbies        @relation(fields: [hobbiesId], references: [id])
  hobbiesId            String               @unique
  Availability         MentorAvailability   @relation(fields: [availabilityId], references: [id])
  availabilityId       String               @unique
  mentorshipRequests   MentorshipRequests[]
}

model MentorPreferences {
  id          String  @id @default(uuid())
  preferences String
  mentor      Mentor?
}

model MentorSkills {
  id     String  @id @default(uuid())
  skills String
  mentor Mentor?
}

model MentorHobbies {
  id      String  @id @default(uuid())
  hobbies String
  mentor  Mentor?
}

model MentorAvailability {
  id     String  @id @default(uuid())
  days   String
  mentor Mentor?
}

model MentorshipRequests {
  id        String   @id @default(uuid())
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  mentor    Mentor?  @relation(fields: [mentorId], references: [id])
  mentorId  String?
}
